"""ann_streamlit_model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u7Y1dGNyNx1nL5D-MpltZhPS1BMO7taO
"""
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
import joblib
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.metrics import MeanAbsoluteError

# Streamlit UI Setup
st.title('Artificial Neural Network (ANN) Model for Frequency Prediction')

# Load the saved model (check your file path here)
try:
    model_p1 = tf.keras.models.load_model("ann_model1.keras")
    model_p2 = tf.keras.models.load_model("ann_model2.keras")
    model_p3 = tf.keras.models.load_model("ann_model3.keras")
    model_p4 = tf.keras.models.load_model("ann_model4.keras")
except ValueError as e:
    st.error(f"Error loading model: {e}")
    st.stop()
import joblib

# Load the saved scaler
scaler = joblib.load('scaler.pkl')

# Load the dataset used for fitting the scaler (or use a representative dataset)
# This step ensures that the scaler is fitted with the correct data
df = pd.read_excel(r"C:\Users\hp\Downloads\combined data points - CCCC.xlsx")

# Fit the scaler with the dataset (ensure it is fitted with the same data used during training)
scaler.fit(df[['Length', 'Breath', 'Diameter', 'Thickness']])

# Prediction Interface
st.sidebar.header("Make Predictions")
length = st.sidebar.number_input("Length (in mm)", min_value=0.0, value=1.0)
breath = st.sidebar.number_input("Breath (in mm)", min_value=0.0, value=1.0)
diameter = st.sidebar.number_input("Diameter (in mm)", min_value=0.0, value=1.0)
thickness = st.sidebar.number_input("Thickness (in mm)", min_value=0.0, value=1.0)


# Function to make predictions
def make_prediction(model, scaler, input_data):
    # Ensure that the input_data is scaled using the fitted scaler
    sample_scaled = scaler.transform([input_data])
    return model.predict(sample_scaled)[0][0]

import math

# Calculate plate and cutout areas
plate_area = length * breath
cutout_area = math.pi * (diameter / 2) ** 2

if st.sidebar.button("Predict"):
# Check if cutout is larger than plate
    if cutout_area > plate_area:
         st.error("‚ùå Cutout area is greater than the plate area. Please adjust the diameter.")
    else:
        input_data = np.array([length, breath, diameter, thickness])

        # Perform predictions for P1, P2, P3, and P4
        p1_prediction = make_prediction(model_p1, scaler, input_data)
        p2_prediction = make_prediction(model_p2, scaler, input_data)
        p3_prediction = make_prediction(model_p3, scaler, input_data)
        p4_prediction = make_prediction(model_p4, scaler, input_data)

        # Display the predictions
        st.write(f"### Prediction for Input Values ({length}, {breath}, {diameter}, {thickness}):")
        st.write(f"**Predicted Frequency F1**: {p1_prediction:.4f} Hz")
        st.write(f"**Predicted Frequency F2**: {p2_prediction:.4f} Hz")
        st.write(f"**Predicted Frequency F3**: {p3_prediction:.4f} Hz")
        st.write(f"**Predicted Frequency F4**: {p4_prediction:.4f} Hz")
